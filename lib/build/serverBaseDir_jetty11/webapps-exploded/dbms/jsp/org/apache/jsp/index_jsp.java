/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/11.0.11
 * Generated at: 2023-05-05 21:06:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.ArrayList;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!--  \n");
      out.write("    @author: Vatsal Thakkar\n");
      out.write("\n");
      out.write("    JSP page for the implementation of front end. Which contains the query description and buttons to execute query\n");
      out.write("-->\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("  <head>\n");
      out.write("    <meta charset=\"UTF-8\" />\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n");
      out.write("    <!-- Style tag for visua; appearance of page -->\n");
      out.write("    <style>\n");
      out.write("        @import \"https://fonts.googleapis.com/css?family=Open+Sans+Condensed:300\";\n");
      out.write("\n");
      out.write("        html,\n");
      out.write("        body {\n");
      out.write("          width: 100%;\n");
      out.write("          height: 100%;\n");
      out.write("          flex-direction: row;\n");
      out.write("          flex-wrap: wrap;\n");
      out.write("          font-family: \"Poppins\", sans-serif;\n");
      out.write("          font-weight: 300;\n");
      out.write("          color: #444;\n");
      out.write("          line-height: 1.9;\n");
      out.write("          background-color: #f3f3f3;\n");
      out.write("          text-align: center;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* ============\n");
      out.write("            Table\n");
      out.write("        =============== */\n");
      out.write("        \n");
      out.write("        .styled-table {\n");
      out.write("          border-collapse: collapse;\n");
      out.write("          font-size: 0.9em;\n");
      out.write("          font-family: sans-serif;\n");
      out.write("          min-width: 400px;\n");
      out.write("          box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .styled-table thead tr {\n");
      out.write("          background-color: #009879;\n");
      out.write("          color: #ffffff;\n");
      out.write("          text-align: center;\n");
      out.write("          border-radius: 10px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .styled-table th,\n");
      out.write("        .styled-table td {\n");
      out.write("          padding: 12px 15px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .styled-table tbody tr {\n");
      out.write("          border-bottom: 1px solid #dddddd;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .styled-table tbody tr:nth-of-type(even) {\n");
      out.write("          background-color: #e0e0e0;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .styled-table tbody tr:last-of-type {\n");
      out.write("          border-bottom: 2px solid #009879;\n");
      out.write("          border-bottom-right-radius: 10px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .col1 {\n");
      out.write("          text-align: justify;\n");
      out.write("          line-height: 1;\n");
      out.write("        }\n");
      out.write("        table {\n");
      out.write("          margin-left: auto;\n");
      out.write("          margin-right: auto;\n");
      out.write("          border-radius: 7px;\n");
      out.write("        }\n");
      out.write("        /* ============\n");
      out.write("            MODAL\n");
      out.write("        =============== */\n");
      out.write("        .modal, .modal_loading {\n");
      out.write("          position: fixed;\n");
      out.write("          overflow: scroll;\n");
      out.write("          top: 50%;\n");
      out.write("          left: 50%;\n");
      out.write("          transform: translate(-50%, -50%);\n");
      out.write("          height: fit-content;\n");
      out.write("          width: fit-content;\n");
      out.write("          max-width: 100rem;\n");
      out.write("          max-height: 45rem;\n");
      out.write("          background-color: #f3f3f3;\n");
      out.write("          padding: 2rem 2rem;\n");
      out.write("          box-shadow: 0 4rem 6rem rgba(0, 0, 0, 0.3);\n");
      out.write("          z-index: 1000;\n");
      out.write("          transition: all 0.5s;\n");
      out.write("          border-radius: 10px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .overlay {\n");
      out.write("          position: absolute;\n");
      out.write("          top: 0;\n");
      out.write("          left: 0;\n");
      out.write("          width: 100%;\n");
      out.write("          height: 100%;\n");
      out.write("          background-color: rgba(0, 0, 0, 0.5);\n");
      out.write("          backdrop-filter: blur(4px);\n");
      out.write("          z-index: 100;\n");
      out.write("          transition: all 0.5s;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .modal__form {\n");
      out.write("          margin: 0 3rem;\n");
      out.write("          display: grid;\n");
      out.write("          grid-template-columns: 1fr 2fr;\n");
      out.write("          align-items: center;\n");
      out.write("          gap: 2.5rem;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .modal__form label {\n");
      out.write("          font-size: 1.7rem;\n");
      out.write("          font-weight: 500;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .modal__form input {\n");
      out.write("          font-size: 1.7rem;\n");
      out.write("          padding: 1rem 1.5rem;\n");
      out.write("          border: 1px solid #ddd;\n");
      out.write("          border-radius: 0.5rem;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .modal__form button {\n");
      out.write("          grid-column: 1 / span 2;\n");
      out.write("          justify-self: center;\n");
      out.write("          margin-top: 1rem;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .btn--close-modal {\n");
      out.write("          font-family: inherit;\n");
      out.write("          color: inherit;\n");
      out.write("          position: absolute;\n");
      out.write("          top: 0.5rem;\n");
      out.write("          right: 1rem;\n");
      out.write("          font-size: 2rem;\n");
      out.write("          cursor: pointer;\n");
      out.write("          border: none;\n");
      out.write("          background: none;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .hidden {\n");
      out.write("          visibility: hidden;\n");
      out.write("          opacity: 0;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .modal-table {\n");
      out.write("          overflow: scroll;\n");
      out.write("          min-height: max-content;\n");
      out.write("        }\n");
      out.write("        /* .modal-chart{\n");
      out.write("          width:50%;\n");
      out.write("        } */\n");
      out.write("        .modal-body{\n");
      out.write("          display: flex;\n");
      out.write("          /* grid-template-columns: 2fr 1fr; */\n");
      out.write("          grid-gap: 20px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* \n");
      out.write("        ==============\n");
      out.write("        Query Buttons\n");
      out.write("        ==============\n");
      out.write("        */\n");
      out.write("        .btn{\n");
      out.write("          cursor: pointer;\n");
      out.write("          margin: 9.5px;\n");
      out.write("          border-radius: 20px;\n");
      out.write("          color: #fff;\n");
      out.write("          background-color: #2bb371;\n");
      out.write("          padding: 5px;\n");
      out.write("          height: 40px;\n");
      out.write("          width: 75px;\n");
      out.write("          transition: .3s;\n");
      out.write("          border-color: white;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .btn:hover{\n");
      out.write("          color: #00924b;\n");
      out.write("          background-color: white;\n");
      out.write("          border-color: #00924b;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("        /* ============\n");
      out.write("            Button\n");
      out.write("        =============== */\n");
      out.write("\n");
      out.write("        .button {\n");
      out.write("          margin-top: 30px;\n");
      out.write("          flex: auto;\n");
      out.write("          display: inline-block;\n");
      out.write("          padding: 0.5rem 1.25rem;\n");
      out.write("          border-radius: 10rem;\n");
      out.write("          color: #fff;\n");
      out.write("          font-weight: 200;\n");
      out.write("          transition: all 0.3s;\n");
      out.write("          position: relative;\n");
      out.write("          overflow: hidden;\n");
      out.write("          z-index: 1;\n");
      out.write("          text-decoration: none;\n");
      out.write("        }\n");
      out.write("        .button:after {\n");
      out.write("          content: \"\";\n");
      out.write("          position: absolute;\n");
      out.write("          bottom: 0;\n");
      out.write("          left: 0;\n");
      out.write("          width: 100%;\n");
      out.write("          height: 100%;\n");
      out.write("          background-color: #2bb371;\n");
      out.write("          border-radius: 10rem;\n");
      out.write("          z-index: -2;\n");
      out.write("        }\n");
      out.write("        .button:before {\n");
      out.write("          content: \"\";\n");
      out.write("          position: absolute;\n");
      out.write("          bottom: 0;\n");
      out.write("          left: 0;\n");
      out.write("          width: 0%;\n");
      out.write("          height: 100%;\n");
      out.write("          background-color: #00924b;\n");
      out.write("          transition: all 0.3s;\n");
      out.write("          border-radius: 10rem;\n");
      out.write("          z-index: -1;\n");
      out.write("        }\n");
      out.write("        .button:hover {\n");
      out.write("          color: #fff;\n");
      out.write("        }\n");
      out.write("        .button:hover:before {\n");
      out.write("          width: 100%;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("    </style>\n");
      out.write("    <title>Database Management Term Project</title>\n");
      out.write("   \n");
      out.write("\n");
      out.write("  </head>\n");
      out.write("  <body>\n");
      out.write("    <h1>CSCI-6370 Database Management - Term Project</h1>\n");
      out.write("    <h2> Pro-Kabaddi League Analysis</h2>\n");
      out.write("    <p><strong>Note:</strong> Click on the Buttons to execute respected Queries. Also, there is a button at the bottom of the table to display the result of recently executed query in case if you close the modal window.</p>\n");
      out.write("   \n");
      out.write("    <!-- \n");
      out.write("      form to submit the queries \n");
      out.write("    -->\n");
      out.write("\n");
      out.write("    <form id= \"fs\" action=\"/dbms/\" method=\"post\">\n");
      out.write("    <table class=\"styled-table\">\n");
      out.write("      <tbody>\n");
      out.write("        <tr>\n");
      out.write("          <td>1.</td>\n");
      out.write("          <td class=\"col1\">\n");
      out.write("            The success rate of raiders who have made the most attempted raids across all seasons\n");
      out.write("          </td>\n");
      out.write("          <td>\n");
      out.write("            <button class='btn' type=\"submit\" name=\"query\" onclick=\"startLoading();\" onload= \"showBarChart();\" value=\"Query 1\">Query-1</button>\n");
      out.write("          </td>\n");
      out.write("        </tr>\n");
      out.write("        <tr>\n");
      out.write("          <td>2.</td>\n");
      out.write("          <td class=\"col1\">\n");
      out.write("            Season-wise comparison between the maximum and average raid points, tackle points, and total points.\n");
      out.write("          </td>\n");
      out.write("          <td>\n");
      out.write("            <button class='btn' type=\"submit\" name=\"query\" onclick=\"startLoading();\" onload = \"showLineChart();\" value=\"Query 2\">Query-2</button>\n");
      out.write("          </td>\n");
      out.write("        </tr>\n");
      out.write("        <tr>\n");
      out.write("          <td>3.</td>\n");
      out.write("          <td class=\"col1\">\n");
      out.write("            For each team, the comparison between their win percentage at home matches, their win percentage at neutral venues, and their win percentage at away matches.\n");
      out.write("          </td>\n");
      out.write("          <td>\n");
      out.write("            <button class='btn' type=\"submit\" name=\"query\" onclick=\"startLoading();\" value=\"Query 3\">Query-3</button>\n");
      out.write("            \n");
      out.write("          </td>\n");
      out.write("        </tr>\n");
      out.write("        <tr>\n");
      out.write("          <td>4.</td>\n");
      out.write("          <td class=\"col1\">\n");
      out.write("            The win rate of a team is being compared between the scenarios where they won the toss and where they did not win the toss\n");
      out.write("          </td>\n");
      out.write("          <td>\n");
      out.write("            <button class='btn' type=\"submit\" name=\"query\" onclick=\"startLoading();\" value=\"Query 4\">Query-4</button>\n");
      out.write("          </td>\n");
      out.write("        </tr>\n");
      out.write("        <tr>\n");
      out.write("          <td>5.</td>\n");
      out.write("          <td class=\"col1\">\n");
      out.write("            The success rate of defenders who have attempted the highest number of tackles across all seasons.\n");
      out.write("            </ul>\n");
      out.write("          </td>\n");
      out.write("          <td>\n");
      out.write("            <button class='btn' type=\"submit\" name=\"query\" onclick=\"startLoading();\" value=\"Query 5\">Query-5</button>\n");
      out.write("          </td>\n");
      out.write("        </tr>\n");
      out.write("        <tr>\n");
      out.write("          <td>6.</td>\n");
      out.write("          <td class=\"col1\">\n");
      out.write("            The success and failure rates of teams in knockout or decider matches .\n");
      out.write("          </td>\n");
      out.write("          <td>\n");
      out.write("            <button class='btn' type=\"submit\" name=\"query\" onclick=\"startLoading();\" value=\"Query 6\">Query-6</button>\n");
      out.write("          </td>\n");
      out.write("        </tr>\n");
      out.write("      </tbody>\n");
      out.write("    </table>\n");
      out.write("  </form>\n");
      out.write("  <a  class=\"button\">Show Result</a>\n");
      out.write("  \n");
      out.write("  <!-- \n");
      out.write("    Modal window to show the output \n");
      out.write("  -->\n");
      out.write("\n");
      out.write("    <div class=\"modal hidden\">\n");
      out.write("      <button class=\"btn--close-modal\">&times;</button>\n");
      out.write("      <h3 class=\"modal__header\">Result of Query</h3>\n");
      out.write("      <div class=\"modal-body\">\n");
      out.write("        <div class=\"modal-table\">\n");
      out.write("          ");

          if(request.getAttribute("rows") != null){

              ArrayList<ArrayList <String> > rows = (ArrayList<ArrayList <String> >) request.getAttribute("rows");
              ArrayList<String> cols = (ArrayList<String>) request.getAttribute("columns");
          
      out.write("\n");
      out.write("          <div id=\"show_res_div\"></div>\n");
      out.write("          ");

              if(rows.size() == 0){
          
      out.write("\n");
      out.write("    \n");
      out.write("          <div style=\"text-align: center; color: red;\">None of the tuples satisfy this query</div>\n");
      out.write("    \n");
      out.write("          ");

              }
              else{

          
      out.write("\n");
      out.write("          <table class=\"styled-table\">\n");
      out.write("          <thead>\n");
      out.write("            <tr>\n");
      out.write("              ");

                  for(int i = 0; i < cols.size(); i++){
              
      out.write("\n");
      out.write("                      <th>");
      out.print( cols.get(i) );
      out.write("</th>\n");
      out.write("              ");

                  }
              
      out.write("\n");
      out.write("            </tr>\n");
      out.write("          </thead>\n");
      out.write("     \n");
      out.write("          <tbody>\n");
      out.write("          ");

              for(int i = 0; i < rows.size(); i++){
        
              ArrayList<String> row = (ArrayList<String>) rows.get(i);
          
      out.write("\n");
      out.write("                  <tr>\n");
      out.write("                      ");
 
                          for(int j = 0; j < row.size(); j++){

                      
      out.write("\n");
      out.write("\n");
      out.write("                      <td> ");
      out.print( row.get(j) );
      out.write("</td>\n");
      out.write("                    \n");
      out.write("                      ");

                          }
                      
      out.write("\n");
      out.write("                    \n");
      out.write("                  </tr>\n");
      out.write("          ");

             
              } // end for
          
      out.write("\n");
      out.write("          </tbody>\n");
      out.write("        </table>\n");
      out.write("        ");

      } //else
      } // end if
  
      out.write("\n");
      out.write("        </div>\n");
      out.write("      </div>\n");
      out.write("    </div>\n");
      out.write("    <div class=\"overlay hidden\"></div>\n");
      out.write("\n");
      out.write("    <div class=\"modal_loading hidden\">\n");
      out.write("      <h3 class=\"modal__header\">Loading Query</h3>\n");
      out.write("      <div class=\"modal-body\">\n");
      out.write("        Query is in execution. Please wait . . .\n");
      out.write("      </div>\n");
      out.write("    </div>\n");
      out.write("    \n");
      out.write("    <footer class=\"footer\">\n");
      out.write("      <p class=\"footer__copyright\">\n");
      out.write("        &copy; Copyright by <a class=\"footer__lin href=\"#\"> Vatsal Thakkar</a>\n");
      out.write("      </p>\n");
      out.write("    </footer>\n");
      out.write("  </body>\n");
      out.write("  \n");
      out.write("  <!-- \n");
      out.write("    JavaScript\n");
      out.write("\n");
      out.write("   -->\n");
      out.write("  <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n");
      out.write("    \n");
      out.write("  <script type=\"text/javascript\">\n");
      out.write("    const modal = document.querySelector(\".modal\");\n");
      out.write("    const modal_loading = document.querySelector(\".modal_loading\");\n");
      out.write("    \n");
      out.write("    const overlay = document.querySelector(\".overlay\");\n");
      out.write("    const btnsOpenModal = document.querySelectorAll(\".button\");\n");
      out.write("    const btnCloseModal = document.querySelector(\".btn--close-modal\");\n");
      out.write("\n");
      out.write("    // workaround\n");
      out.write("    const hidden_div = document.getElementById(\"show_res_div\");\n");
      out.write("    if(hidden_div){\n");
      out.write("      modal.classList.remove(\"hidden\");\n");
      out.write("      overlay.classList.remove(\"hidden\");\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    const openModal = function (e) {\n");
      out.write("      e.preventDefault();\n");
      out.write("      modal.classList.remove(\"hidden\");\n");
      out.write("      overlay.classList.remove(\"hidden\");\n");
      out.write("    };\n");
      out.write("\n");
      out.write("    const closeModal = function () {\n");
      out.write("      modal.classList.add(\"hidden\");\n");
      out.write("      overlay.classList.add(\"hidden\");\n");
      out.write("    };\n");
      out.write("\n");
      out.write("    const startLoading = function(){\n");
      out.write("      modal_loading.classList.remove(\"hidden\");\n");
      out.write("      overlay.classList.remove(\"hidden\");\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    btnsOpenModal.forEach((btn) => btn.addEventListener(\"click\", openModal));\n");
      out.write("\n");
      out.write("    btnCloseModal.addEventListener(\"click\", closeModal);\n");
      out.write("    overlay.addEventListener(\"click\", closeModal);\n");
      out.write("\n");
      out.write("    document.addEventListener(\"keydown\", function (e) {\n");
      out.write("      if (e.key === \"Escape\" && !modal.classList.contains(\"hidden\")) {\n");
      out.write("        closeModal();\n");
      out.write("      }\n");
      out.write("    });\n");
      out.write("   \n");
      out.write("\n");
      out.write("  </script>\n");
      out.write("\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
